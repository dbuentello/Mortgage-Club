# rubocop:disable LineLength

class CrawlFeesService
  include ActionView::Helpers::NumberHelper

  attr_accessor :fees, :params

  def initialize(args)
    @fees = []
    @params = args
  end

  def call
    if params[:loan_purpose] == "Purchase"
      result_page = search
      get_data_for_purchase(Nokogiri::HTML.parse(result_page))
    else
      get_data_for_refinance
    end

    @fees
  end

  def search
    url = URI("https://www.ortconline.com/Web2/ProductsServices/InformationServices/RateFeeCalc/Default.aspx")

    http = Net::HTTP.new(url.host, url.port)
    http.use_ssl = true
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE

    request = Net::HTTP::Post.new(url)
    request["content-type"] = "application/x-www-form-urlencoded"

    body = StringIO.new
    body << "__EVENTTARGET="
    body << "&__EVENTARGUMENT="
    body << "&__LASTFOCUS="
    body << "&__VIEWSTATE=%2FwEPDwULLTE2ODE1NjYwMzEPZBYCZg9kFgICAQ9kFgoCAQ9kFgJmDw8WAh4HVmlzaWJsZWdkFgICAQ8PFgIeC05hdmlnYXRlVXJsBQYvd2ViMi9kFgJmDw8WAh4ISW1hZ2VVcmwFLi93ZWIyL0ltYWdlcy9OZXdJbWFnZXMvTG9nb3MvTmV3X0xvZ29fT1JUQy5wbmdkZAIDD2QWAgIBDxYCHgRUZXh0Bb0YPHVsIGNsYXNzPSJob3Jpem9udGFsIiBpZD0ibmF2aWdhdGlvbiIgc3R5bGU9InRvcDogOyI%2BPGxpIGNsYXNzPSJmaXJzdCI%2BPGEgY2xhc3M9InRvcCIgaHJlZj0iL3dlYjIvIj5Ib21lPC9hPjwvbGk%2BPGxpPjxhIGNsYXNzPSJ0b3AiPlByb2R1Y3RzICZhbXA7IFNlcnZpY2VzPC9hPjx1bD48bGk%2BPGEgaHJlZj0iL3dlYjIvcHJvZHVjdHNzZXJ2aWNlcy9pbmZvcm1hdGlvbnNlcnZpY2VzL2RlZmF1bHQuYXNweCI%2BRGlnaXRhbCBUb29sczwvYT48L2xpPjxsaT48YSBocmVmPSIvd2ViMi9wcm9kdWN0c3NlcnZpY2VzL3RpdGxlc2VydmljZXMvZGVmYXVsdC5hc3B4Ij5UaXRsZSBJbnN1cmFuY2U8L2E%2BPC9saT48bGk%2BPGEgaHJlZj0iL3dlYjIvcHJvZHVjdHNzZXJ2aWNlcy9lc2Nyb3dzZXJ2aWNlcy9kZWZhdWx0LmFzcHgiPkVzY3JvdzwvYT48L2xpPjxsaT48YSBocmVmPSIvd2ViMi9wcm9kdWN0c3NlcnZpY2VzL2NvbW1lcmNpYWxzdWJkaXZpc2lvbi9kZWZhdWx0LmFzcHgiPkNvbW1lcmNpYWw8L2E%2BPC9saT48bGk%2BPGEgaHJlZj0iL3dlYjIvcHJvZHVjdHNzZXJ2aWNlcy90cnVzdGVlc2VydmljZXMvZGVmYXVsdC5hc3B4Ij5DQSBUcnVzdGVlIFNlcnZpY2VzPC9hPjwvbGk%2BPGxpPjxhIGhyZWY9Ii93ZWIyL3Byb2R1Y3Rzc2VydmljZXMvY3VzdG9tZXJzZXJ2aWNlL2RlZmF1bHQuYXNweCI%2BQ3VzdG9tZXIgU2VydmljZTwvYT48L2xpPjxsaT48YSBocmVmPSIvd2ViMi9wcm9kdWN0c3NlcnZpY2VzL2NlbnRyYWxpemVkc2VydmljZXMvZGVmYXVsdC5hc3B4Ij5DZW50cmFsaXplZCBTZXJ2aWNlczwvYT48L2xpPjxsaT48YSBocmVmPSIvd2ViMi9wcm9kdWN0c3NlcnZpY2VzL2NmcGIuYXNweCI%2BQ0ZQQjwvYT48L2xpPjxsaT48YSBocmVmPSIvd2ViMi9wcm9kdWN0c3NlcnZpY2VzL2FmZmlsaWF0ZXMuYXNweCI%2BQWZmaWxpYXRlczwvYT48L2xpPjxsaT48YSBocmVmPSIvd2ViMi9wcm9kdWN0c3NlcnZpY2VzL211bHRpY3VsdHVyYWxyZXNvdXJjZXMvZGVmYXVsdC5hc3B4Ij5NdWx0aWN1bHR1cmFsIFJlc291cmNlczwvYT48L2xpPjwvdWw%2BPC9saT48bGk%2BPGEgY2xhc3M9InRvcCI%2BSG9tZSBCdXllcnMgJmFtcDsgU2VsbGVyczwvYT48dWw%2BPGxpPjxhIGhyZWY9Ii93ZWIyL2hvbWVidXllcnNzZWxsZXJzL0FyaXpvbmEuYXNweCI%2BQVogQnV5ZXJzIGFuZCBTZWxsZXJzPC9hPjwvbGk%2BPGxpPjxhIGhyZWY9Ii93ZWIyL2hvbWVidXllcnNzZWxsZXJzL0NhbGlmb3JuaWEuYXNweCI%2BQ0EgQnV5ZXJzIGFuZCBTZWxsZXJzPC9hPjwvbGk%2BPGxpPjxhIGhyZWY9Ii93ZWIyL2hvbWVidXllcnNzZWxsZXJzL0hhd2FpaS5hc3B4Ij5ISSBCdXllcnMgYW5kIFNlbGxlcnM8L2E%2BPC9saT48bGk%2BPGEgaHJlZj0iL3dlYjIvaG9tZWJ1eWVyc3NlbGxlcnMvTmV2YWRhLmFzcHgiPk5WIEJ1eWVycyBhbmQgU2VsbGVyczwvYT48L2xpPjxsaT48YSBocmVmPSIvd2ViMi9ob21lYnV5ZXJzc2VsbGVycy9PcmVnb24uYXNweCI%2BT1IgQnV5ZXJzIGFuZCBTZWxsZXJzPC9hPjwvbGk%2BPGxpPjxhIGhyZWY9Ii93ZWIyL2hvbWVidXllcnNzZWxsZXJzL1dhc2hpbmd0b24uYXNweCI%2BV0EgQnV5ZXJzIGFuZCBTZWxsZXJzPC9hPjwvbGk%2BPC91bD48L2xpPjxsaT48YSBjbGFzcz0idG9wIj5SZWFsIEVzdGF0ZSBQcm9mZXNzaW9uYWxzPC9hPjx1bD48bGk%2BPGEgaHJlZj0iL3dlYjIvcmVhbGVzdGF0ZXByb2Zlc3Npb25hbHMvbmV3c2FuZGFsZXJ0cy5hc3B4Ij4qKipOZXdzICZhbXA7IEFsZXJ0cyoqKjwvYT48L2xpPjxsaT48YSBocmVmPSIvd2ViMi9yZWFsZXN0YXRlcHJvZmVzc2lvbmFscy9hZ2VudHMuYXNweCI%2BQWdlbnRzIGFuZCBCcm9rZXJzPC9hPjwvbGk%2BPGxpPjxhIGhyZWY9Ii93ZWIyL3JlYWxlc3RhdGVwcm9mZXNzaW9uYWxzL2xlbmRlcnMuYXNweCI%2BTGVuZGVyczwvYT48L2xpPjxsaT48YSBocmVmPSIvd2ViMi9yZWFsZXN0YXRlcHJvZmVzc2lvbmFscy9idWlsZGVycy5hc3B4Ij5CdWlsZGVyL0RldmVsb3BlcjwvYT48L2xpPjxsaT48YSBocmVmPSIvd2ViMi9yZWFsZXN0YXRlcHJvZmVzc2lvbmFscy9jb21tZXJjaWFsLmFzcHgiPkNvbW1lcmNpYWw8L2E%2BPC9saT48L3VsPjwvbGk%2BPGxpIGNsYXNzPSJsYXN0Ij48YSBjbGFzcz0idG9wIj5BYm91dDwvYT48dWw%2BPGxpIGNsYXNzPSJsYXN0bGluayI%2BPGEgaHJlZj0iL3dlYjIvYWJvdXQvZGVmYXVsdC5hc3B4Ij5PdXIgQ29tcGFueTwvYT48L2xpPjxsaSBjbGFzcz0ibGFzdGxpbmsiPjxhIGhyZWY9Ii93ZWIyL2Fib3V0L2xvY2F0aW9ucy9kZWZhdWx0LmFzcHgiPk9mZmljZSBMb2NhdG9yPC9hPjwvbGk%2BPGxpIGNsYXNzPSJsYXN0bGluayI%2BPGEgaHJlZj0iL3dlYjIvYWJvdXQvZXhlY3V0aXZldGVhbS5hc3B4Ij5FeGVjdXRpdmUgVGVhbTwvYT48L2xpPjxsaSBjbGFzcz0ibGFzdGxpbmsiPjxhIGhyZWY9Ii93ZWIyL2Fib3V0L2FnZW5jeS5hc3B4Ij5BZ2VuY3kgU2VydmljZXM8L2E%2BPC9saT48bGkgY2xhc3M9Imxhc3RsaW5rIj48YSBocmVmPSIvd2ViMi9hYm91dC9jYXJlZXJjZW50ZXIuYXNweCI%2BQ2FyZWVyIENlbnRlcjwvYT48L2xpPjxsaSBjbGFzcz0ibGFzdGxpbmsiPjxhIGhyZWY9Ii93ZWIyL2Fib3V0L3BhcmVudGNvbXBhbnkvZGVmYXVsdC5hc3B4Ij5QYXJlbnQgQ29tcGFueTwvYT48L2xpPjxsaSBjbGFzcz0ibGFzdGxpbmsiPjxhIGhyZWY9Ii93ZWIyL2Fib3V0L2NvbnRhY3R1cy5hc3B4Ij5Db250YWN0IFVzPC9hPjwvbGk%2BPGxpIGNsYXNzPSJsYXN0bGluayI%2BPGEgaHJlZj0iL3dlYjIvYWJvdXQvc29jaWFsL2RlZmF1bHQuYXNweCI%2BU29jaWFsIE1lZGlhPC9hPjwvbGk%2BPGxpIGNsYXNzPSJsYXN0bGluayI%2BPGEgaHJlZj0iL3dlYjIvYWJvdXQvZ2xvc3NhcnkuYXNweCI%2BR2xvc3Nhcnkgb2YgVGVybXM8L2E%2BPC9saT48bGkgY2xhc3M9Imxhc3RsaW5rIj48YSBocmVmPSIvd2ViMi9hYm91dC9wcml2YWN5cG9saWN5LmFzcHgiPlByaXZhY3kgUG9saWN5PC9hPjwvbGk%2BPGxpIGNsYXNzPSJsYXN0bGluayI%2BPGEgaHJlZj0iL3dlYjIvYWJvdXQvdGVybXNvZnVzZS5hc3B4Ij5UZXJtcyBPZiBVc2U8L2E%2BPC9saT48bGkgY2xhc3M9Imxhc3RsaW5rIj48YSBocmVmPSIvd2ViMi9hYm91dC9jb21wbGFpbnQuYXNweCI%2BQ29uc3VtZXIgQ29tcGxhaW50czwvYT48L2xpPjwvdWw%%2BL0Fib3V0L0xvY2F0aW9ucy9Bcml6b25hL0RlZmF1bHQuYXNweGQCAw8WAh8SBSl%2BL0Fib3V0L0xvY2F0aW9ucy9DYWxpZm9ybmlhL0RlZmF1bHQuYXNweGQCBQ8WAh8SBSV%2BL0Fib3V0L0xvY2F0aW9ucy9IYXdhaWkvRGVmYXVsdC5hc3B4ZAIHDxYCHxIFI34vQWJvdXQvTG9jYXRpb25zL05ldmFkYS9DbGFyay5hc3B4ZAIJDxYCHxIFJX4vQWJvdXQvTG9jYXRpb25zL09yZWdvbi9EZWZhdWx0LmFzcHhkAgsPFgIfEgUpfi9BYm91dC9Mb2NhdGlvbnMvV2FzaGluZ3Rvbi9EZWZhdWx0LmFzcHhkAg0PFgIfEgUpfi9SZWFsRXN0YXRlUHJvZmVzc2lvbmFscy9Db21tZXJjaWFsLmFzcHhkGAEFHl9fQ29udHJvbHNSZXF1aXJlUG9zdEJhY2tLZXlfXxYcBSJfY3RsMDpQYWdlQ29udGVudDpQcm9wZXJ0eUNpdHlMaXN0BShfY3RsMDpQYWdlQ29udGVudDpQcm9wZXJ0eUNvdW50eUNvbWJvYm94BR1fY3RsMDpQYWdlQ29udGVudDpDYWxjTG9hbkVzdAUZX2N0bDA6UGFnZUNvbnRlbnQ6Q2FsY0dmZQUZX2N0bDA6UGFnZUNvbnRlbnQ6Q2FsY0dmZQUaX2N0bDA6UGFnZUNvbnRlbnQ6VHlwZVJlZmkFGl9jdGwwOlBhZ2VDb250ZW50OlR5cGVSZWZpBRpfY3RsMDpQYWdlQ29udGVudDpUeXBlU2FsZQUjX2N0bDA6UGFnZUNvbnRlbnQ6U2hvcnRTYWxlQ2hlY2tib3gFQF9jdGwwOlBhZ2VDb250ZW50OkVuZG9yc2VtZW50c1JlcGVhdGVyOl9jdGwxOkVuZG9yc2VtZW50Q2hlY2tib3gFQF9jdGwwOlBhZ2VDb250ZW50OkVuZG9yc2VtZW50c1JlcGVhdGVyOl9jdGwyOkVuZG9yc2VtZW50Q2hlY2tib3gFQF9jdGwwOlBhZ2VDb250ZW50OkVuZG9yc2VtZW50c1JlcGVhdGVyOl9jdGwzOkVuZG9yc2VtZW50Q2hlY2tib3gFQF9jdGwwOlBhZ2VDb250ZW50OkVuZG9yc2VtZW50c1JlcGVhdGVyOl9jdGw0OkVuZG9yc2VtZW50Q2hlY2tib3gFQF9jdGwwOlBhZ2VDb250ZW50OkVuZG9yc2VtZW50c1JlcGVhdGVyOl9jdGw1OkVuZG9yc2VtZW50Q2hlY2tib3gFQF9jdGwwOlBhZ2VDb250ZW50OkVuZG9yc2VtZW50c1JlcGVhdGVyOl9jdGw2OkVuZG9yc2VtZW50Q2hlY2tib3gFQF9jdGwwOlBhZ2VDb250ZW50OkVuZG9yc2VtZW50c1JlcGVhdGVyOl9jdGw3OkVuZG9yc2VtZW50Q2hlY2tib3gFQF9jdGwwOlBhZ2VDb250ZW50OkVuZG9yc2VtZW50c1JlcGVhdGVyOl9jdGw4OkVuZG9yc2VtZW50Q2hlY2tib3gFQF9jdGwwOlBhZ2VDb250ZW50OkVuZG9yc2VtZW50c1JlcGVhdGVyOl9jdGw5OkVuZG9yc2VtZW50Q2hlY2tib3gFQV9jdGwwOlBhZ2VDb250ZW50OkVuZG9yc2VtZW50c1JlcGVhdGVyOl9jdGwxMDpFbmRvcnNlbWVudENoZWNrYm94BUFfY3RsMDpQYWdlQ29udGVudDpFbmRvcnNlbWVudHNSZXBlYXRlcjpfY3RsMTE6RW5kb3JzZW1lbnRDaGVja2JveAVBX2N0bDA6UGFnZUNvbnRlbnQ6RW5kb3JzZW1lbnRzUmVwZWF0ZXI6X2N0bDEyOkVuZG9yc2VtZW50Q2hlY2tib3gFQV9jdGwwOlBhZ2VDb250ZW50OkVuZG9yc2VtZW50c1JlcGVhdGVyOl9jdGwxMzpFbmRvcnNlbWVudENoZWNrYm94BSdfY3RsMDpQYWdlQ29udGVudDpJbkhvdXNlTm90YXJ5Q2hlY2tib3gFKF9jdGwwOlBhZ2VDb250ZW50Ok91dHNpZGVTaWduaW5nQ2hlY2tib3gFIV9jdGwwOlBhZ2VDb250ZW50OkRvY1ByZXBDaGVja2JveAUWX2N0bDA6UGFnZUNvbnRlbnQ6RXhpdAUXX2N0bDA6UGFnZUNvbnRlbnQ6UmVzZXQFGF9jdGwwOlBhZ2VDb250ZW50OlN1Ym1pdLdAsKiUkq6HitLTwIL0NLB12Pci"
    body << "&_ctl0%3APageMastHead%3A_ctl0%3AUsernameTextbox="
    body << "&_ctl0%3APageMastHead%3A_ctl0%3APasswordTextbox="
    body << "&_ctl0%3APageMastHead%3ASearchTextBox="
    body << "&_ctl0%3APageContent%3AscrollTop=1019"
    body << "&_ctl0%3APageContent%3AscrollLeft=0"
    body << "&_ctl0%3APageContent%3ACalcType=CalcLoanEst"
    body << "&_ctl0%3APageContent%3AFirstNameTextbox="
    body << "&_ctl0%3APageContent%3ALastNameTextbox="
    body << "&_ctl0%3APageContent%3ACompanyTextbox="
    body << "&_ctl0%3APageContent%3ATransactionType=TypeSale"
    body << "&_ctl0%3APageContent%3APartyNameTextbox="
    body << "&_ctl0%3APageContent%3APropertyStateList=CA"
    body << "&_ctl0%3APageContent%3APropertyAddress="
    body << "&_ctl0%3APageContent%3APropertyCityList%3AText=#{CGI.escape(params[:city])}"
    body << "&_ctl0%3APageContent%3APropertyCityList=#{CGI.escape(params[:city])}"

    if params[:city] == "San Francisco"
      body << "&_ctl0%3APageContent%3APropertyZipList=#{params[:zip]}"
    else
      body << "&_ctl0%3APageContent%3APropertyZipList="
    end

    body << "&_ctl0%3APageContent%3AEscrowStateList=CA"
    body << "&_ctl0%3APageContent%3AEscrowCountyList=#{CGI.escape(params[:county])}"
    body << "&_ctl0%3APageContent%3ASalesPrice=#{CGI.escape(number_to_currency(params[:sales_price]))}"
    body << "&_ctl0%3APageContent%3ALoanAmount=#{CGI.escape(number_to_currency(params[:loan_amount]))}"
    body << "&_ctl0%3APageContent%3AReoList=No"
    body << "&_ctl0%3APageContent%3AEndorsementsRepeater%3A_ctl4%3AEndorsementCheckbox=on"
    body << "&_ctl0%3APageContent%3AOutsideSigningCheckbox=on"
    body << "&_ctl0%3APageContent%3ASubmit.x=24"
    body << "&_ctl0%3APageContent%3ASubmit.y=17"
    body << "&__VIEWSTATEGENERATOR=84127C7C&__EVENTVALIDATION=%2FwEdAI0Bt5ur%2FrCDpHe8dnDq4LEFNcFpl9o3cwlGDpqjPX3U8qdkvBOBgEbnB%2Bnygck9aKczypOtce0VJ%2FZT3YlsA0poNZbYY9dGbdkw9TImJ66Ximo2diRDEGOs3bbZt%2B01%2BqRA%2BOuS2cxrD0Iq5gYw0XBzIHQKtDLqPLYT9UJUfeBgvRoUWkHeEEa0ob5L9AKfiD%2Bhk4X1eR86kL%2Fn7NaeiVtWb0%2Fyqx4jKp3ccUr23axcLB8v1qDBQxUy6TjZ0gHd%2FLH9bCmu1htD4eDN1%2F0SFnGFl6rGE5k2nH5JB%2FUmM8d611DhLhVudKV2Icez0ygrVmECJwPrCIvVPmSzES%2FEFbcwZuwu6w2GtdSUPFyr0MpW3zLmZq2Ci0oajpO3F%2BoPi8LNnbdHgYfXCeQXrW6mIwwPyL%2F74WdG3C51kOqURQIHMqFFOucMLu3ZTooSBvazZ0AY74Hla6ZLJdi4%2BIbWedrl8WftNb4dO4KDq%2F%2BB6tIS3FBO4fxqVZQ%2F3Ul8dmq85vV%2FotABALUrnYq2d3hq6vI0JBB7a5IYPUhqsJqvqhkEtZznIK%2FM6W%2Fl7x%2B%2F6L2pTD5BTwwthWT3Ur51%2BbCLpIMefeQ6cFyPbFXw8W5PIZhPO%2F8CSCKwQcq2dYl%2Br81CwvAEmTyXsQ8tJm0PCjfx5Dw54lK%2B6PAw%2BfHLZw%2FeoFY9uLJUlNc%2FLriHHysUNFEJeXTYhUyIrINR%2FNfKuxQn7mkm%2BbV3pruEOgSzVAnK72%2Fn9LiKL58M1wMiwe8hF3Rdn7zfQgN59FkZ3WGh5TV0MHwqdQJiU%2BRcpCLwLi432HJ87GQmVoR0lkEZEOJ35TZ%2FBnfLR9%2FOTrQwb%2FQjTjbKd%2BGOsbx6Fx51Geanis9R8AevmmZhhJLqkMri8pUQ%2BymCns3EfRY99%2Fc86W7P5WzUE3y0oGE7FrBdrVHvLxCYNteWzrJ7FmNnQ5QkxcKjXS4TZwbATL3gw1VI3LnNBIkMs%2FqqWfebFRrKaGa9auqu2RWSgHl%2FyppY%2FnsE%2FTIz108wpWpu4W59im%2FJWQCcDYbkMfdHM%2BMXcIT2VppoSCjFdB%2BDr40X1sf%2F%2BukGnVJB1gTJs27FeNj1moTi%2FlFf%2F1M9dzfzXkie5d2Wj4bMRLLKSpwRwSTqxCb%2Bk5%2B6MbA%2BMNAcseoYvI1ZOk3Bm8JZ12E6oH7oc%2BO4qZGXhAXibIEZqMDj4nfraZjjMrg61sDnujMx1A4pwZTOiAsYEgSrkRg8qqjvqLuh1vg0BAJQ5a22hEimGC42ghO%2F3mHeQWaAz51rCag15AixDhIJbWeFE2iz2nxA%2FfiiJzLyrwhzS8QpKKbO9som%2FYAPjdQXifsP0ti%2FiroQGZWoUpYslCwLbgHSj9jaZ7byGQp%2FMnvlnrhFcysGXNEuKojspK%2BEDc1bLvG2Oac%2FJd3vNrL%2B8fq%2FsglGRm3b47FBnmELHI055ZC2ywRc%2BLxjAakn415p5P6Md3EfyTS%2BfQpNUqceVrUdv3cBMgXsORT%2Fw%2F2TarfKK2w%2Buz2t7IPh6TrWk5ghCp%2FPtSuEauod7yXneHYyGG6vglob2e5zFoKxW%2FZms7IZJy%2Fx0QHj1Yi3QZpX873aL1RhPl094YATR0Drp8%2FhCxVTdRjoowsFjU9upfe8ZIWpgS8hHtTvR3p1NiQyreYYKdKeAe2E2FmyZ0FYjbkoIVAENEMj%2B2yofS7htadgKa5SctJ1rYueZxLAJpQwnNhq5i%2Fw1Yhj9A8GRaT9d0pHUkX%2Fh5c35OXlx1NQy5cnkJM9UqHXh3Z%2F7rhGmT%2BqdBhMMJQtGVq%2FRLOHfKPD6eaFrnPDjIEg0f9RU%2BH1T%2BvlVX4QtcLbfc9Lz5uL9Xh9N4CNVKEjrtB1rN9V%2FkCFq40Vf5q9GKTjnj%2BDzrokDGPwIQDG7vmxlfR%2BgU5BHaVLCWlk2zo%2B6GPcy9KdjjUIEh7cDw%2BwcP36LO%2FrqiNgC8kazViMj%2By75UyBridTBRClk1FjW97PmkqjLUlKC5ttoregvApsYc6sfRkMyskrkg8i3rLRhe1NFe2IKWrN1mHvPuwhR7KJu9wKgQsFrkyWjyRYhl9CUflJXStD1vln5PK2miwKgcZngwlnLDEdcI7b8X2ilnBh5EdK%2BcIwHCF3EJbEDqV3%2FBNL6jJ80KQUMO1R4wa3hZD3Y4d%2F62c3msg8fG5Ao%2F7tcWWskYsipuD8vFLVm%2BEVZd8BgD2cALb2J7WYh8%2BTCRokr01ABkdC5apIxIGf3nCkH6NxyjdVvlUZVBi5qjkdpHbtXRlPm8xppo3olf%2F6PAejVEs8WgK9nCOXM%2B6yvxnbpdkuP07AmWU0PQ4uzpX%2BVGYq10P5MTn3VGTXRR3hY2Q4mJxgRfhcXPSsYSS9aaWhVzSsFCXRVWSRQ4lvruamvDih1K9pkg9qAAd%2Be0op7ts%2BZtsHKbvZAkOnGmm%2B1GUnjQz95sCGPYGTZISnqkZf0Wy7f7jVtfDyvR5O4Rj6nKquJqiS6WKzHpg8e%2FcY8wO1YByzg3NX9iqJY6JYO6I0YTSOC0FfQZDRt3vhl8hW3YDaGtlMhUUvACsuvGZCegAfKBhPo6MRaSnbQ6bFoth8ws4aeWtG219xcoUPG1ERtKn7fUBe0I3ScDSqCFhUpyM7dz10lAI%2F7YyGCpdl1QBAHqzJ9PXm8MLdXHK%2Fw8hj5J%2BtbjeMteLiDtbzKcfRVl30tPVCYjEZjzRj5MEtXgARKBguXwZVxiMonJ2eTlU4bZAon0f%2F%2F6mRK8AD8oadmMGNON4rs0IBB1GXxE0d3jByD4yDWcchbJhVDtqyKRL7lSjPaM%2BRoJ60qB7o94%2BcmmNwCIDflGGqrCXSzvRwt5L4Rf9WMlpVcIN3QgiXGHFxYEC%2BCd6ov2kge0TS7b9%2Bc7wFAI3QQECy31fbESMOKEZvZpNjSD4wCN4vMH2JriIl66n%2BzceKePoqmQdm%2FBxDjEDYN5YM6AnvVQii0Eoh90gnvYTqPgpd7w%2Fon7Ynvbu0ox0jigmv4zVWDhOHpzrS8caUHAQXdv2njZBFjQsO%2BlyS%2F0bqko%2BDDEsoIpA%3D"

    request.body = body.string
    response = http.request(request)
    response.body
  end

  def get_data_for_purchase(result_page)
    fees_c = []
    begin
      section_c = result_page.css("#_ctl0_PageContent_SectionCTable tr")

      section_c.each do |element|
        td = element.css("td")
        next if td.empty?

        fees_c << {
          "Description": remove_total(td[0].text),
          "FeeAmount": remove_currency(td[1].text),
          "HubLine": 814,
          "FeeType": 1,
          "IncludeInAPR": false
        }
      end
    rescue
      fees_c
    end

    fees_e = []
    begin
      section_e = result_page.css("#_ctl0_PageContent_SectionETable tr")
      section_e.each do |element|
        td = element.css("td")
        next if td.empty?

        fees_e << {
          "Description": remove_total(td[0].text),
          "FeeAmount": remove_currency(td[1].text),
          "HubLine": 814,
          "FeeType": 1,
          "IncludeInAPR": false
        }
      end
    rescue
      fees_e
    end

    fees_h = []
    begin
      section_h = result_page.css("#_ctl0_PageContent_SectionHTable tr")
      section_h.each do |element|
        td = element.css("td")
        next if td.empty? || td.size <= 1

        fees_h << {
          "Description": remove_total(td[0].text),
          "FeeAmount": remove_currency(td[1].text),
          "HubLine": 814,
          "FeeType": 1,
          "IncludeInAPR": false
        }
      end
    rescue
      fees_h
    end

    fees_c.reject! { |x| x[:Description] == "" || x[:FeeAmount] == 0 }
    fees_e.reject! { |x| x[:Description] == "" || x[:FeeAmount] == 0 }
    fees_h.reject! { |x| x[:Description] == "" || x[:FeeAmount] == 0 }

    @fees << {
      "Description": "Services you can shop for",
      "FeeAmount": fees_c.map { |x| x[:FeeAmount] }.sum,
      "Fees": fees_c
    }

    @fees << {
      "Description": "Taxes and other government fees",
      "FeeAmount": fees_e.map { |x| x[:FeeAmount] }.sum,
      "Fees": fees_e
    }

    @fees << {
      "Description": "Other",
      "FeeAmount": fees_h.map { |x| x[:FeeAmount] }.sum,
      "Fees": fees_h
    }
  end

  def get_data_for_refinance
    fees_c = []
    fees_e = []

    fees_c << {
      "Description": "Outside Signing Service",
      "FeeAmount": 150.0,
      "HubLine": 814,
      "FeeType": 1,
      "IncludeInAPR": false
    }

    fees_c << {
      "Description": "Title - Lender's Title Policy",
      "FeeAmount": get_lender_title_policy,
      "HubLine": 814,
      "FeeType": 1,
      "IncludeInAPR": false
    }

    fees_c << {
      "Description": "Title - Recording Service Fee",
      "FeeAmount": 20.0,
      "HubLine": 814,
      "FeeType": 1,
      "IncludeInAPR": false
    }

    fees_c << {
      "Description": "Title - Settlement Agent Fee",
      "FeeAmount": get_settlement_agent_fee,
      "HubLine": 814,
      "FeeType": 1,
      "IncludeInAPR": false
    }

    fees_e << {
      "Description": "Recording Fees",
      "FeeAmount": 95.0,
      "HubLine": 814,
      "FeeType": 1,
      "IncludeInAPR": false
    }

    @fees << {
      "Description": "Services you can shop for",
      "FeeAmount": fees_c.map { |x| x[:FeeAmount] }.sum,
      "Fees": fees_c
    }

    @fees << {
      "Description": "Taxes and other government fees",
      "FeeAmount": fees_e.map { |x| x[:FeeAmount] }.sum,
      "Fees": fees_e
    }
  end

  def get_lender_title_policy
    if params[:loan_amount] <= 250_000.0
      450.0
    elsif params[:loan_amount] <= 500_000.0
      645.0
    elsif params[:loan_amount] <= 750_000.0
      800.0
    elsif params[:loan_amount] <= 1_000_000.0
      1100.0
    elsif params[:loan_amount] <= 1_500_000.0
      1500.0
    elsif params[:loan_amount] <= 2_000_000.0
      2100.0
    elsif params[:loan_amount] <= 3_000_000.0
      2800.0
    elsif params[:loan_amount] <= 4_000_000.0
      3400.0
    elsif params[:loan_amount] <= 5_000_000.0
      4100.0
    elsif params[:loan_amount] <= 6_000_000.0
      4700.0
    elsif params[:loan_amount] > 6_000_000.0
      5500.0
    end
  end

  def get_settlement_agent_fee
    if params[:loan_amount] <= 250_000.0
      400.0
    elsif params[:loan_amount] <= 1_500_000.0
      450.0
    elsif params[:loan_amount] <= 3_000_000.0
      550.0
    elsif params[:loan_amount] > 3_000_000.0
      700.0
    end
  end

  def remove_total(label)
    return "" if label.empty?

    if label.index("8.1-06")
      label[label.index("8.1-06") + 7..-1]
    else
      if label.index("(")
        label = label.delete("*")
        label[0..label.index("(").to_i - 2]
      else
        label
      end
    end
  end

  def remove_currency(number)
    return 0 if number.empty?

    if number.index("seller paid")
      0
    else
      number.gsub(/[^\d\.]/, '').to_f
    end
  end
end
# rubocop:enable LineLength
